#!/usr/bin/python

# Copyright (C) 2009 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser


# Create option parser

req_doc = """

mbg-validate  Copyright (C) 2009 Anand Patil
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
See <http://www.gnu.org/licenses/> for the terms of the license.


  module                The module from which maps are to be generated.
  database-file         The name of the database file produced by the mcmc.
  burn                  The number of initial MCMC iterations to discard. 
  pred-pts              A csv file containing the lon, lat, (time,) and 
                        associated covariate values where you want to predict.
                        
                        NOTE: time must be in units of decimal years. That
                        is OK.

"""

p = OptionParser('usage: %prog module database-file burn pred-pts [options]' + req_doc)
p.add_option('-t','--thin',help='How much to thin the MCMC trace. Defaults to 1, meaning no thinning. This is recommended unless it takes too long.',dest='thin',type='int')
p.add_option('-i','--iter',help='The total number of samples to use in generating the map. Defaults to 20000',dest='total',type='int')

p.set_defaults(thin=50)
p.set_defaults(total=20000)


(o, args) = p.parse_args()
if len(args) != 4:
    raise ValueError, 'You must supply exactly four positional arguments. You supplied %i.'%len(args)

o.module, o.hf_name, o.burn, o.pred_input = args
o.burn = int(o.burn)



import matplotlib
matplotlib.use('PDF')
matplotlib.interactive(False)

from map_utils import *
from generic_mbg import *
import tables as tb
import numpy as np
import os, imp, sys, time

import pylab as pl
from pylab import csv2rec    


# Load up given module and load its relevant contents

mod_path, mod_name = os.path.split(o.module)
mod_basename, mod_ext = os.path.splitext(mod_name)
mod_search_path = [mod_path, os.getcwd()] + sys.path
mod = imp.load_module(mod_basename, *imp.find_module(mod_basename, mod_search_path))

for n in ['f_name', 'nugget_name', 'f_has_nugget','x_name']:
    try:
        exec("%s=getattr(mod,'%s')"%(n,n))
    except:
        cls,inst,tb = sys.exc_info()
        new_inst = cls('Could not import %s from %s. Tell Anand. Original error message:\n\n\t%s'%(n,mod_name,inst.message))
        raise cls,new_inst,tb
        
if hasattr(mod, 'validate_postproc'):
    postproc = mod.validate_postproc
elif hasattr(mod, 'postproc'):
    postproc = mod.postproc
else:
    raise ValueError, 'Module %s lacks the postproc attribute. Tell Anand.'%mod


# Parse input file

input = csv2rec(file(o.pred_input,'U'))
from numpy.ma import mrecords
if isinstance(input, np.ma.mrecords.MaskedRecords):
    msg = 'Error, could not parse input at following rows:\n'
    for name in input.dtype.names:
        if np.sum(input[name].mask)>0:
            msg += '\t%s: %s\n'%(name, str(np.where(input[name].mask)[0]+1))
    raise ValueError, msg

lon = maybe_convert(input, 'lon', 'float')
lat = maybe_convert(input, 'lat', 'float')
if hasattr(input, 't'):
    t = maybe_convert(input, 't', 'float')
    x = combine_st_inputs(lon,lat,t)
else:
    x = combine_spatial_inputs(lon,lat)
    
non_cov_columns = {}
if hasattr(mod, 'non_cov_columns'):
    non_cov_coltypes = mod.non_cov_columns
else:
    non_cov_coltypes = {}
non_cov_colnames = non_cov_coltypes.keys()

covariate_dict = {}
for n in input.dtype.names:
    if n not in ['lon','lat','t','pos','neg']:
        if n in non_cov_colnames:
            non_cov_columns[n] = maybe_convert(input, n, non_cov_coltypes[n])
        else:
            covariate_dict[n]=maybe_convert(input, n, 'float')


# Create predictive locations and open hdf5 archive

hf = tb.openFile(o.hf_name)


# Create predictive samples

# FIXME: Make this more generic, so that it works with non-binomial likelihoods.
pos = maybe_convert(input, 'pos', 'float')
neg = maybe_convert(input, 'neg', 'float')
n_sampled = pos+neg
if np.any(n_sampled==0):
    where_zero = np.where(n_sampled==0)[0]
    raise ValueError, 'Pos+neg = 0 in the rows (starting from zero):\n %s'%where_zero

t1 = time.time()
p_samples = hdf5_to_samps(hf,x,o.burn,o.thin,o.total,[sample_reduce],f_name,f_has_nugget,x_name,covariate_dict,nugget_name,postproc,sample_finalize,**non_cov_columns).T
n_samples = np.array([pm.rbinomial(n_sampled[i], p_samples[:,i]) for i in xrange(len(n_sampled))])
print '\nPredictive samples drawn in %f seconds\n'%(time.time() - t1)


# Write out

hf_path, hf_basename  = os.path.split(o.hf_name)
base_outname = os.path.splitext(hf_basename)[0]
val_dir = os.path.join(hf_path, base_outname+'-validation')
try:
    os.mkdir(val_dir)
except OSError:
    pass
os.chdir(val_dir)

# Mean errors
errors = np.rec.fromarrays([np.empty(len(input)) for i in (0,1,2)], names='mean error,mean abs error,RMS error')
for i in xrange(len(input)):

    p_obs = pos[i]/float(neg[i])
    dev = n_samples[i]/float(n_sampled[i]) - p_obs

    pl.clf()
    pdf, bins, patches = pl.hist(p_samples[i], 50, normed=True,facecolor='.3')
    yext = pdf.max()
    pl.plot([p_obs,p_obs],[0,yext],'k-.',label='Observed frequency')
    pl.legend(loc=0)
    pl.xlabel('Frequency')
    pl.ylabel('Predictive density')
    pl.savefig('%i.pdf'%i)    
    
    errors['mean error'][i] = np.mean(dev)
    errors['mean abs error'][i] = np.mean(np.abs(dev))
    errors['RMS error'][i] = np.sqrt(np.mean(dev**2))

for k,v in [('p_samples',p_samples),('n_samples',n_samples)]:
    tb.openFile(k,'w').createCArray('/','samples',
                        tb.Float32Atom(), 
                        shape = v.shape, 
                        filters=tb.Filters(complevel=1))[:] = v[:]
    
pl.rec2csv(errors,'mean-errors.csv')

for f in validation_fns:
    print 'Generating plot of %s'%f.__name__
    pl.clf()
    res=f(p_samples.T, n_samples.T, pos, neg)
    pl.savefig(f.__name__ + '.pdf', transparent=True)
    pl.rec2csv(res,f.__name__+'.csv')
