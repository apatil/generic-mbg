# Copyright (C) 2009 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#!/usr/bin/python

from optparse import OptionParser

# Create option parser
req_doc = """
mbg-scalar-priors  Copyright (C) 2009 Anand Patil
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
See <http://www.gnu.org/licenses/> for the terms of the license.


  module                The module from which maps are to be generated.
"""
p = OptionParser('usage: %prog module[options]' + req_doc)
p.add_option('-i','--iter',help='The total number of samples to use in generating the histograms. Defaults to 10000',dest='iter',type='int')


p.set_defaults(iter=10000)


(o, args) = p.parse_args()

(o, args) = p.parse_args()
if len(args) != 1:
    raise ValueError, 'You must supply exactly one positional argument. You supplied %i.'%len(args)

o.module = args[0]


import matplotlib
matplotlib.use('PDF')
matplotlib.interactive(False)

from map_utils import *
from generic_mbg import *
import tables as tb
import numpy as np
import os, imp, sys
import pylab as pl


# Load up given module and load its relevant contents

mod_path, mod_name = os.path.split(o.module)
mod_basename, mod_ext = os.path.splitext(mod_name)
mod_search_path = [mod_path, os.getcwd()] + sys.path
mod = imp.load_module(mod_basename, *imp.find_module(mod_basename, mod_search_path))

for n in ['make_model']:
    try:
        exec("%s=getattr(mod,'%s')"%(n,n))
    except:
        cls,inst,tb = sys.exc_info()
        new_inst = cls('Could not import %s from %s. Tell Anand. Original error message:\n\n\t%s'%(n,mod_name,inst.message))
        raise cls,new_inst,tb


# Create Model object with dummy lon, lat and possibly t.
d = np.array([0,1])
try:
    M = pm.Model(make_model(np.array([1,0]),np.array([0,1]),d,d,{}))
except:
    M = pm.Model(make_model(np.array([1,0]),np.array([0,1]),d,d,d,{}))

def g(obj):
    a = np.array(obj.value)
    if np.prod(a.shape)<=1 and a.dtype != 'object':
        if isinstance(a,pm.Stochastic):
            try:
                a.rand()
                return True
            except:
                return False
        else:
            return True
    else:
        return False

scalar_variables = filter(g, M.stochastics | M.deterministics)
scalar_stochastics = filter(lambda a: isinstance(a, pm.Stochastic), scalar_variables)
M2 = pm.Model(scalar_stochastics)



# Draw samples

res = dict(zip(scalar_variables, [[] for v in scalar_variables]))

for i in xrange(o.iter):
    M2.draw_from_prior()
    for v in scalar_variables:
        res[v].append(v.value)
        
for v in scalar_variables:
    res[v] = np.asarray(res[v]).squeeze()


# Write out

plot_dir = mod_basename+'-scalar-priors'
try:
    os.mkdir(plot_dir)
except OSError:
    pass
os.chdir(plot_dir)

for s in scalar_variables:
    pl.clf()
    pl.hist(res[s],50,normed=True)
    pl.title(s.__name__)
    pl.xlabel('Value')
    pl.ylabel('Prior density')
    pl.savefig(s.__name__+'.pdf')