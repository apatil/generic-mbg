# Copyright (C) 2009 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#!/usr/bin/python

from optparse import OptionParser


# Create option parser

req_doc = """


  module                The module from which maps are to be generated.
  asciis                A list of ascii files with some pixels MISSING. Realizations
                        will be generated on these masks. NOTE: You need to keep the
                        total number of pixels in all asciis down to a few thousand
                        at most!
                        
  NOTES: 
  - All covariate coefficients are set to zero for the purpose of generating realizations.
  - All scalar parameters will be drawn from their priors. If you want to choose specific 
    values, you must set their 'observed' flags.
"""
p = OptionParser('usage: %prog module ascii0.asc ascii1.asc ... [options]' + req_doc)
p.add_option('-n','--n-realizations',help='The number of realizations to produce. Defaults to 5.',dest='n',type='int')
p.add_option('-m','--mean',help='The value of the global mean parameter. Defaults to 0.',dest='m',type='float')
p.add_option('-y','--year',help='The DECIMAL YEAR SINCE 2009 at which the realizations should be produced. Required for space-time models.',dest='year',type='float')

p.set_defaults(n=5)
p.set_defaults(m=0)
p.set_defaults(year=None)

(o, args) = p.parse_args()
if len(args) < 2:
    raise ValueError, 'You must supply exactly at least one ascii.'

o.module = args[0]
o.asciis = args[1:]

import matplotlib
matplotlib.use('PDF')
matplotlib.interactive(False)

from map_utils import *
from generic_mbg import *
import tables as tb
import numpy as np
import os, imp, sys, time
import pylab as pl


# Load up given module and load its relevant contents

mod_path, mod_name = os.path.split(o.module)
mod_basename, mod_ext = os.path.splitext(mod_name)
mod_search_path = [mod_path, os.getcwd()] + sys.path
mod = imp.load_module(mod_basename, *imp.find_module(mod_basename, mod_search_path))

for n in ['f_name', 'nugget_name', 'f_has_nugget', 'postproc', 'make_model']:
    try:
        exec("%s=getattr(mod,'%s')"%(n,n))
    except:
        cls,inst,tb = sys.exc_info()
        new_inst = cls('Could not import %s from %s. Tell Anand. Original error message:\n\n\t%s'%(n,mod_name,inst.message))
        raise cls,new_inst,tb

if hasattr(mod,'diag_safe'):
    diag_safe=mod.diag_safe
else:
    diag_safe = False


# Create Model object with dummy lon, lat and possibly t.

d = np.array([0,1])
try:
    M = pm.Model(make_model(np.array([1,0]),np.array([0,1]),d,d,{}))
except:
    M = pm.Model(make_model(np.array([1,0]),np.array([0,1]),d,d,d,{}))


# Create predictive locations

asciis = o.asciis

x = {}
u = {}
for ascii in asciis:
    this_x, unmasked = asc_to_locs(ascii)
    if not o.year is None:
        this_x = np.vstack((this_x.T,o.year*np.ones(this_x.shape[0]))).T
    x[ascii.replace('.asc','')] = this_x
    u[ascii.replace('.asc','')] = unmasked

Mfun = pm.gp.Mean(lambda x: np.ones(x.shape[:-1]) * o.m)

asc_dir = mod_basename+'-realizations'
try:
    os.mkdir(asc_dir)
except OSError:
    pass
os.chdir(asc_dir)

xllc = np.min([xi[:,0].min() for xi in x.itervalues()])*180./np.pi
xurc = np.max([xi[:,0].max() for xi in x.itervalues()])*180./np.pi
yllc = np.min([xi[:,1].min() for xi in x.itervalues()])*180./np.pi
yurc = np.max([xi[:,1].max() for xi in x.itervalues()])*180./np.pi
    
for i in xrange(o.n):
    print 'Realization %i of %i'%(i,o.n)
    M.draw_from_prior()
    C=M.C.value
    safe_C = pm.gp.NearlyFullRankCovariance(C.eval_fun, **C.params)
    f = pm.gp.Realization(Mfun, safe_C)

    pl.clf()    
    for ascii in asciis:
        n = ascii.replace('.asc','')
        surf = postproc(f(x[n]) + np.random.normal(size=x[n].shape[0])*np.sqrt(getattr(M, nugget_name).value))
        out_name = '%s-%i.asc'%(n,i)
        vec_to_asc(surf, '../%s.asc'%n, out_name, u[n], path='')
        
        lon, lat, data = asc_to_ndarray(out_name) 
        pl.imshow(grid_convert(data,'y+x+','y-x+'), extent=[lon.min(), lon.max(), lat.min(), lat.max()], interpolation='nearest')

    pl.axis([xllc,xurc,yllc,yurc])
    pl.colorbar()
    pl.savefig('%i.pdf'%i)
        
        